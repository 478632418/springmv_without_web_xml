<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- 凭证匹配器 -->
	<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<!-- 加密算法 -->
		<property name="hashAlgorithmName" value="md5"></property>
		<!-- 迭代次数 -->
		<property name="hashIterations" value="8"></property>
	</bean>

	<!-- 配置自定义Realm -->
	<bean id="myRealm" class="com.dx.test.shiro.MyRealm">
		<!-- 将凭证匹配器设置到realm中，realm按照凭证匹配器的要求进行散列 -->
		<property name="credentialsMatcher" ref="credentialsMatcher"></property>
		<!--启用缓存，默认SimpleAccountRealm关闭，默认AuthenticatingRealm、AuthorizingRealm、CachingRealm开启-->
		<property name="cachingEnabled" value="true"/>
		<!--启用身份验证缓存，即缓存AuthenticationInfo，默认false-->
		<property name="authenticationCachingEnabled" value="true"/>
		<!--启用授权缓存，即缓存AuthorizationInfo的信息，默认为true-->
		<property name="authorizationCachingEnabled" value="true"/>
		<!--<property name="authenticationCacheName" value="authenticationCache"></property>-->
		<property name="authenticationCache" ref="redisCache"></property>
	</bean>
	<!--cacheManager-->
	<!-- // 采用EHCache混合缓存
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml"/>
	</bean>
	-->
	<!-- // 采用本地内存方式缓存
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/>
    -->
	<bean id="redisCache" class="com.dx.test.shiro.RedisCache">
		<constructor-arg ref="redisTemplate"></constructor-arg>
	</bean>

	<bean id="cacheManager" class="com.dx.test.shiro.RedisCacheManager"/>

	<!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
	<bean id="sharesession" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- cookie的name,对应的默认是 JSESSIONID -->
		<constructor-arg name="name" value="SHAREJSESSIONID"/>
		<!-- jsessionId的path为 / 用于多个系统共享jsessionId -->
		<property name="path" value="/"/>
	</bean>
	<bean id="redisSessionDao" class="com.dx.test.shiro.RedisSessionDao"></bean>
	<!-- 会话管理器-->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!--删除在session过期时跳转页面时自动在URL中添加JSESSIONID-->
		<property name="sessionIdUrlRewritingEnabled" value="false" />
		<!-- 设置超时时间 -->
		<property name="globalSessionTimeout" value="1800000"/>
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true"/>
		<!-- 定时检查失效的session -->
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<!-- 集群共享session -->
		<property name="sessionIdCookieEnabled" value="true"/>
		<property name="sessionIdCookie" ref="sharesession"/>
		<property name="sessionDAO" ref="redisSessionDao"/>
	</bean>

	<!-- securityManager安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm"></property>
		<property name="cacheManager" ref="cacheManager"></property>
		<property name="sessionManager" ref="sessionManager"></property>
 	</bean>

	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- id属性值要对应 web.xml中shiro的filter对应的bean -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"></property>
		<!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求地址将由formAuthenticationFilter进行表单认证 -->
		<property name="loginUrl" value="/login"></property>
		<!-- 认证成功统一跳转到first.action，建议不配置，shiro认证成功会默认跳转到上一个请求路径 -->
		<!-- <property name="successUrl" value="/first.action"></property> -->
		<!-- 通过unauthorizedUrl指定没有权限操作时跳转页面，这个位置会拦截不到，下面有给出解决方法 -->
		<!-- <property name="unauthorizedUrl" value="/refuse.jsp"></property> -->

		<!-- 过滤器定义，从上到下执行，一般将/**放在最下面 -->
		<property name="filterChainDefinitions">
			<!-- 
			过滤器简称        对应的java类
			anon            org.apache.shiro.web.filter.authc.AnonymousFilter
			authc           org.apache.shiro.web.filter.authc.FormAuthenticationFilter
			authcBasic      org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
			perms           org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter
			port            org.apache.shiro.web.filter.authz.PortFilter
			rest            org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter
			roles           org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
			ssl             org.apache.shiro.web.filter.authz.SslFilter
			user            org.apache.shiro.web.filter.authc.UserFilter
			logout          org.apache.shiro.web.filter.authc.LogoutFilter
			————————————————
			版权声明：本文为CSDN博主「a745233700」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
			原文链接：https://blog.csdn.net/a745233700/article/details/81350191
			-->
			<value>
				# 对静态资源设置匿名访问 
				/images/** = anon
				/js/** = anon
				/styles/** = anon
				/validatecode.jsp=anon
				/index=anon
				
				# 请求logout.action地址，shiro去清除session 
				/logout.action = logout
				
				# /**=anon 所有的url都可以匿名访问,不能配置在最后一排，不然所有的请求都不会拦截 
				# /**=authc 所有的url都必须通过认证才可以访问 
				/** = authc
			</value>
		</property>
	</bean>

	<!-- 解决shiro配置的没有权限访问时，unauthorizedUrl不跳转到指定路径的问题 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!--登录-->
				<prop key="org.apache.shiro.authz.UnauthenticatedException">
					redirect:/web/page/login.do
				</prop>
				<!--授权-->
				<prop key="org.apache.shiro.authz.UnauthorizedException">
					redirect:/web/page/unauthorized.do
				</prop>
			</props>
		</property>
		<property name="defaultErrorView" value="/index/error.do"/>
	</bean>

</beans>