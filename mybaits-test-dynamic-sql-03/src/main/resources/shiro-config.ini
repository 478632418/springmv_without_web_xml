[main] 
#不需要实例化 securityManager
#securityManager=org.apache.shiro.mgt.DefaultSecurityManager
#authenticator 
#配置验证器
authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator 
#配置策略
authenticationStrategy=org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy 
#将验证器和策略关联起来
authenticator.authenticationStrategy=$authenticationStrategy 
securityManager.authenticator=$authenticator 
  
#authorizer 
authorizer=org.apache.shiro.authz.ModularRealmAuthorizer 
permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver 
authorizer.permissionResolver=$permissionResolver 
securityManager.authorizer=$authorizer 
  
#realm 
dataSource=com.alibaba.druid.pool.DruidDataSource 
dataSource.driverClassName=com.mysql.jdbc.Driver 
dataSource.url=jdbc:mysql://localhost:3306/shiro 
dataSource.username=root 
dataSource.password=123456

jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm 
jdbcRealm.dataSource=$dataSource 
jdbcRealm.permissionsLookupEnabled=true


#告诉shiro我们用哪个加密算法
#sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
#jdbcRealm.credentialsMatcher = $sha256Matcher
credentialsMatcher=org.apache.shiro.authc.credential.HashedCredentialsMatcher  
credentialsMatcher.hashAlgorithmName=MD5  
credentialsMatcher.hashIterations=8 
jdbcRealm.credentialsMatcher = $credentialsMatcher

securityManager.realms=$jdbcRealm 
[users] 
#提供了对用户/密码及其角色的配置，用户名=密码，角色1，角色2
zhangsan=123,admin,member
lisi=1234,member

[roles] 
#提供了角色及权限之间关系的配置，角色=权限1，权限2
admin=article:update,article:delete,article:query
member=article:query
  
[urls] 
#用于web，提供了对web url拦截相关的配置，url=拦截器[参数]，拦截器 
/index.html = anon 
/admin/** = authc, roles[admin], perms["article:query"] 

